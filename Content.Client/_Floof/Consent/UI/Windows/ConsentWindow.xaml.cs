// SPDX-FileCopyrightText: 2024 Pierson Arnold
// SPDX-FileCopyrightText: 2025 sleepyyapril
// SPDX-FileCopyrightText: 2025 wheelwrightt
//
// SPDX-License-Identifier: AGPL-3.0-or-later AND MIT

using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared._DEN.Consent;
using Content.Shared._Floof.Consent;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Content.Shared._AS.Consent;
using Robust.Shared.Player;

namespace Content.Client._Floof.Consent.UI.Windows;

[GenerateTypedNameReferences]
public sealed partial class ConsentWindow : FancyWindow
{
    [Dependency] private readonly SharedConsentCardSystem _card = default!;
    [Dependency] private readonly IClientConsentManager _consentManager = default!;
    [Dependency] private readonly IConfigurationManager _configManager = default!;
    [Dependency] private readonly ISharedPlayerManager _player = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;

    private readonly Dictionary<string, int> _tabs = new();
    private readonly HashSet<ConsentCategoryPrototype> _categories = new();
    private readonly List<Control> _controls = new();
    private readonly List<EntryState> _entries = new();

    private string? SavedChangesText;
    private string? UnsavedChangesText;

    public ConsentWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        FreetextTab.Orphan();
        TogglesTab.Orphan();
        ConsentCardsTab.Orphan();

        ConsentTabs.AddTab(FreetextTab, Loc.GetString("consent-window-freetext-label"));
        ConsentTabs.AddTab(TogglesTab, Loc.GetString("consent-window-toggles-label"));
        ConsentTabs.AddTab(ConsentCardsTab, Loc.GetString("consent-window-cards-label"));

        InitializeCategories();

        SaveConsentSettings.OnPressed += _ =>
        {
            SaveConsentSettings.Disabled = true;
            _consentManager.UpdateConsent(GetSettings());
        };

        _consentManager.OnServerDataLoaded += UpdateUi;
        if (_consentManager.HasLoaded)
            UpdateUi();

        // Validate freetext length
        var maxLength = _configManager.GetCVar(CCVars.ConsentFreetextMaxLength);
        var length = Rope.Collapse(ConsentFreetext.TextRope).Length;
        CharacterLimit.Text = Loc.GetString("consent-window-char-limit", ("length", length), ("maxLength", maxLength));

        ConsentFreetext.Placeholder = new Rope.Leaf(Loc.GetString("consent-window-freetext-placeholder"));
        ConsentFreetext.OnTextChanged += _ => UnsavedChanges();

        // Aurora - Add consent cards
        XCard.OnPressed += _ => { RaiseConsentCard("XCard"); };
    }

    private void InitializeCategories()
    {
        var consentCategories = _protoManager
            .EnumeratePrototypes<ConsentCategoryPrototype>()
            .OrderBy(category => category.Priority);

        _tabs.Clear();
        var tab = 0;

        foreach (var category in consentCategories)
        {
            var tabName = Loc.GetString($"consent-category-{category.ID}-name");
            var contents = new BoxContainer()
            {
                Access = AccessLevel.Public,
                HorizontalExpand = true,
                SeparationOverride = 2,
                Orientation = BoxContainer.LayoutOrientation.Vertical
            };

            _categories.Add(category);

            CategoriesContainer.AddTab(contents, tabName);
            _tabs.Add(category.ID, tab);
            tab++;
        }
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (disposing)
            _consentManager.OnServerDataLoaded -= UpdateUi;
    }

    private PlayerConsentSettings GetSettings()
    {
        var text = Rope.Collapse(ConsentFreetext.TextRope);
        var toggles = new Dictionary<ProtoId<ConsentTogglePrototype>, string>();

        foreach (var entry in _entries)
        {
            if (entry.Button == null
                || entry.Consent.DefaultValue == entry.Button.Pressed)
                continue;

            // DEN: I now have to save offs as well.
            // Side note, who saved this to database as a string?
            var value = entry.Button.Pressed ? "on" : "off";
            toggles[entry.Consent] = value;
        }

        return new(text, toggles);
    }

    private void UnsavedChanges()
    {
        // Validate freetext length
        var maxLength = _configManager.GetCVar(CCVars.ConsentFreetextMaxLength);
        var length = Rope.Collapse(ConsentFreetext.TextRope).Length;

        if (length > maxLength)
        {
            SaveConsentSettings.Disabled = true;
            CharacterLimit.Text = Loc.GetString("consent-window-exceeded-char-limit", ("length", length), ("maxLength", maxLength));
            CharacterLimit.FontColorOverride = Color.Red;

            return;
        }

        // If everything is valid, enable save button and inform user they need to save.
        CharacterLimit.Text = Loc.GetString("consent-window-char-limit", ("length", length), ("maxLength", maxLength));
        UnsavedChangesWarning.Text = UnsavedChangesText;
        UnsavedChangesWarning.FontColorOverride = Color.Red;
        SaveConsentSettings.Disabled = false;
    }

    private void AddConsentEntry(ConsentCategoryPrototype category, ConsentTogglePrototype toggle)
    {
        if (!_tabs.TryGetValue(category.ID, out var tab))
            return;

        var contents = CategoriesContainer.GetTabContents(tab);

        if (contents == null)
            return;

        var state = new EntryState { Consent = toggle };
        var container = new BoxContainer { Orientation = BoxContainer.LayoutOrientation.Vertical };
        var header = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            Margin = new(5f, 5f)
        };

        var name = new Label
        {
            Text = Loc.GetString($"consent-{toggle.ID}-name"),
            HorizontalExpand = true
        };

        var defaultValue = toggle.DefaultValue;

        var buttonOff = new Button { Text = "Off" };
        buttonOff.StyleClasses.Add("OpenRight");
        buttonOff.Pressed = !defaultValue;

        var buttonOn = new Button { Text = "On" };
        buttonOn.StyleClasses.Add("OpenLeft");
        buttonOn.Pressed = defaultValue;
        state.Button = buttonOn;

        buttonOff.OnPressed += _ => ButtonOnPress(buttonOff, buttonOn);
        buttonOn.OnPressed += _ => ButtonOnPress(buttonOn, buttonOff);

        var consent = _consentManager.GetConsent();
        consent.Toggles.TryGetValue(toggle.ID, out var toggleValue);

        if (toggleValue != null)
        {
            buttonOn.Pressed = toggleValue == "on";
            buttonOff.Pressed = !buttonOn.Pressed;
        }

        header.AddChild(name);
        header.AddChild(buttonOff);
        header.AddChild(buttonOn);

        container.AddChild(header);

        var desc = new RichTextLabel
        {
            Text = Loc.GetString($"consent-{toggle.ID}-desc"),
            MaxWidth = 850,
        };

        container.AddChild(desc);

        var wrapper = new PanelContainer();

        wrapper.StyleClasses.Add("PdaBorderRect");
        wrapper.AddChild(container);
        contents.AddChild(wrapper);

        _controls.Add(wrapper);
        _entries.Add(state);
    }

    private void AddConsentEntries(ConsentCategoryPrototype category)
    {
        var members = category.Members.OrderBy(c => c.Id);

        foreach (var toggleId in members)
        {
            var toggleExists = _protoManager.TryIndex(toggleId, out var toggle);

            if (!toggleExists || toggle == null)
                continue;

            AddConsentEntry(category, toggle);
        }
    }

    private void RaiseConsentCard(string cardName)
    {
        if (_player.LocalSession is { } player)
            _card.RaiseConsentCard(player.UserId, cardName);
    }

    private void ButtonOnPress(Button currentButton, Button otherbutton)
    {
        if (currentButton == otherbutton)
            return;

        currentButton.Pressed = true;
        otherbutton.Pressed = false;
        UnsavedChanges();
    }

    public void UpdateUi()
    {
        var consent = _consentManager.GetConsent();

        if (UnsavedChangesText == null && SavedChangesText == null)
        {
            SavedChangesText = Loc.GetString("consent-window-saved-changes");
            UnsavedChangesText = Loc.GetString("consent-window-unsaved-changes");
        }

        ConsentFreetext.TextRope = new Rope.Leaf(consent.Freetext);
        _entries.Clear();

        foreach (var entry in _controls)
            entry.Orphan();

        _controls.Clear();

        foreach (var prototype in _categories)
            AddConsentEntries(prototype);

        CharacterLimit.FontColorOverride = null;
        SaveConsentSettings.Disabled = true;
        UnsavedChangesWarning.Text = SavedChangesText;
        UnsavedChangesWarning.FontColorOverride = null;
    }

    private struct EntryState
    {
        public ConsentTogglePrototype Consent;
        public Button? Button;
    }
}
