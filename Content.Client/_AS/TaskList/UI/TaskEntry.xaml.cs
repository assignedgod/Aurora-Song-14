using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Content.Client.Message;
using Content.Shared.Random;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Content.Shared._AS.TaskList;
using Content.Shared._AS.TaskList.Prototypes;

namespace Content.Client._AS.TaskList.UI;

[GenerateTypedNameReferences]
public sealed partial class TaskEntry : BoxContainer
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    public Action? OnCompleteButtonPressed;
    public Action<string>? OnNewTaskButtonPressed;

    public TaskEntry(TaskData task)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        if (!_prototype.TryIndex<TaskPrototype>(task.Task, out var taskPrototype))
            return;

        var items = new List<string>();
        foreach (var entry in taskPrototype.ItemEntries)
        {
            items.Add(Loc.GetString("bounty-console-manifest-entry",
            ("amount", entry.Amount),
            ("item", Loc.GetString(entry.Name))));
        }
        ManifestLabel.SetMarkup(Loc.GetString("bounty-console-manifest-label", ("item", string.Join(", ", items))));
        RewardLabel.SetMarkup(Loc.GetString("bounty-console-reward-label", ("reward", taskPrototype.Reward)));
        DescriptionLabel.SetMarkup(Loc.GetString("bounty-console-description-label", ("description", Loc.GetString(taskPrototype.Description))));
        IdLabel.SetMarkup(Loc.GetString("bounty-console-id-label", ("id", taskPrototype.ID)));

        CompleteButton.OnPressed += _ => OnCompleteButtonPressed?.Invoke();
    }
}
