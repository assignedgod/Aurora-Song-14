// SPDX-FileCopyrightText: 2025 Cam
// SPDX-FileCopyrightText: 2025 Cami
// SPDX-FileCopyrightText: 2025 sleepyyapril
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using Content.Client.UserInterface.Systems.Chat.Widgets;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.UserInterface.Systems.Chat.Controls.Denu;


[GenerateTypedNameReferences]
public sealed partial class DenuWindow : AnimatedWindow
{
    private const string PreviewText = "\"Hello! *italic* **bold** ***bolditalic***\" *looks at you*";

    private readonly DenuUIController _denuUIController;
    private readonly IClientConsoleHost _consoleHost;

    public DenuWindow()
    {
        RobustXamlLoader.Load(this);
        _denuUIController = UserInterfaceManager.GetUIController<DenuUIController>();
        _consoleHost = IoCManager.Resolve<IClientConsoleHost>();
        InitializeUI();
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        UpdateLivePreview();
        base.FrameUpdate(args);
    }

    private void InitializeUI()
    {
        SetupWindow();
        SetupEventHandlers();
        SetupColorSelectors();
        SetupHelpDisplay();
        UpdateExamplePreview();
    }

    private void SetupWindow()
    {
        Title = "Denu";
        Tabs.SetTabTitle(0, "Chat");
        Tabs.SetTabTitle(1, "Preview");
        Tabs.SetTabTitle(2, "Help");

        HelpButton.Visible = true;
        HelpButton.Disabled = false;
    }

    private void SetupEventHandlers()
    {
        HelpButton.OnPressed += _ => Tabs.CurrentTab = 2;
        CloseButton.OnPressed += _ => Close();

        TypingToggleButton.WhileToggled += _denuUIController.ShowTypingIndicator;
        TypingToggleButton.OnToggledOff += _denuUIController.HideTypingIndicator;
        _consoleHost.AnyCommandExecuted += (_, _, _, _) => TypingToggleButton.Pressed = false;
        EarmuffSlider.OnReleased += slider => OnEarmuffSliderChanged(slider.Value, true);
        EarmuffSlider.OnValueChanged += slider => OnEarmuffSliderChanged(slider.Value);

        AutoFormatterCheckBox.OnToggled += args => _denuUIController.AutoFormatterEnabled = args.Pressed;
        RemoveAsterisksCheckBox.OnToggled += args =>
        {
            _denuUIController.FormatterConfig.RemoveAsterisks = args.Pressed;
            UpdateExamplePreview();
            UpdateLivePreview();
        };
    }

    private void SetupColorSelectors()
    {
        DialogueColorSelector.Color = _denuUIController.GetColorReplacement("DialogueColor");
        DialogueColorSelector.OnColorChanged += c => HandleColorChanged("DialogueColor", c);

        EmoteColorSelector.Color = _denuUIController.GetColorReplacement("EmoteColor");
        EmoteColorSelector.OnColorChanged += c => HandleColorChanged("EmoteColor", c);
    }

    private void SetupHelpDisplay()
    {
        HelpDisplay.Formatter = text => _denuUIController.FormatMessage(text);
    }

    private void HandleColorChanged(string replacementName, Color color)
    {
        _denuUIController.SetColorReplacement(replacementName, color);
        UpdateExamplePreview();
    }

    private void UpdateExamplePreview()
    {
        var exampleText = GetExampleText();
        ExamplePreview.SetMarkup(exampleText);
        HelpDisplay.ForceReformat();
    }

    private void UpdateLivePreview()
    {
        var currentMessage = GetCurrentChatMessage();
        LargeLivePreview.SetMarkup(currentMessage);
    }

    private string GetChatInputText() =>
        UserInterfaceManager.ActiveScreen?.GetWidget<ChatBox>()?.ChatInput?.Input.Text ??
        UserInterfaceManager.ActiveScreen?.GetWidget<ResizableChatBox>()?.ChatInput?.Input.Text ??
        "";

    private string GetExampleText()
    {
        var formattedPreview = _denuUIController.FormatMessage(PreviewText);
        return $"{PreviewText}\n{formattedPreview}";
    }

    private string GetCurrentChatMessage()
    {
        var message = GetChatInputText();
        return string.IsNullOrWhiteSpace(message) ? GetExampleText() : _denuUIController.FormatMessage(message);
    }

    private void OnEarmuffSliderChanged(float sliderValue, bool sendUpdate = false)
    {
        var rounded = (float) Math.Round(sliderValue, 2);
        EarmuffDistanceLabel.Text = sliderValue.ToString("F1");
        _denuUIController.SetEarmuffRange(rounded, sendUpdate);
    }
}
